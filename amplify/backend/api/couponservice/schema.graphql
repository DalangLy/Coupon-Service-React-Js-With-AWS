# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY {
#   globalAuthRule: AuthRule = { allow: public }
# } # FOR TESTING ONLY!
type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, read] }
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [update, read] }
      { allow: groups, groups: ["Guests"], operations: [create, update, read] }
    ]
  ) {
  id: ID!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: String!
  jobTitle: String
  company: String
  companyAddress: String
  note: String
  groups: [String]
  status: String
  deletedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Coupon
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [update, read] }
      { allow: groups, groups: ["Guests"], operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  price: Float!
  period: Int
  shortcut: String!
  description: String
  deletedAt: AWSDateTime
  creator: User @hasOne
  packages: [Package] @hasMany
  couponDiscountPackage: [CouponDiscountPackage]
    @manyToMany(relationName: "PackageCouponDiscounts")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Package
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [update, read] }
      { allow: groups, groups: ["Guests"], operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  quantity: Int!
  price: Int!
  discount: Int!
  description: String
  deletedAt: AWSDateTime
  creator: User @hasOne
  coupons: Coupon @belongsTo
  couponDiscountPackage: [CouponDiscountPackage] @hasMany
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CouponDiscountPackage
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [read] }
      { allow: groups, groups: ["Guests"], operations: [read] }
    ]
  ) {
  id: ID!
  discount: Float!
  price: Float!
  quantity: Int!
  description: String
  package: Package @belongsTo
  deletedAt: AWSDateTime
  coupon: Coupon @hasOne
  coupons: [Coupon] @manyToMany(relationName: "PackageCouponDiscounts")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type SaleCoupon
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [update, read] }
      { allow: groups, groups: ["Guests"], operations: [create, update, read] }
    ]
  ) {
  id: ID!
  transaction: String!
  creator: User @hasOne
  approver: User @hasOne
  owner: User @hasOne
  package: Package @hasOne
  price: Float!
  quantity: Int!
  discount: Float!
  total: Float!
  totalCouponSerialCodeAmount: Int!
  totalCouponSerialCodeUsed: Int!
  description: String
  status: String!
  deletedAt: AWSDateTime
  serialCoupons: [CouponSerialCode] @hasMany
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CouponSerialCode
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [update, read] }
      { allow: groups, groups: ["Guests"], operations: [create, update, read] }
    ]
  ) {
  id: ID!
  coupon: Coupon @hasOne
  owner: User @hasOne
  code: String!
  price: Float!
  dateValidStart: AWSDateTime
  dateValidEnd: AWSDateTime
  deletedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type CouponApplied
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      {
        allow: groups
        groups: ["Supports"]
        operations: [update, create, read]
      }
      { allow: groups, groups: ["Guests"], operations: [create, update, read] }
    ]
  ) {
  id: ID!
  serialCoupon: CouponSerialCode @hasOne
  note: String
  coupon: Coupon @hasOne
  issueDate: AWSDateTime
  applier: User @hasOne
  resolver: User @hasOne
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Setting
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrators"]
        operations: [create, update, read, delete]
      }
      { allow: groups, groups: ["Sales"], operations: [create, update, read] }
      { allow: groups, groups: ["Finances"], operations: [read] }
      { allow: groups, groups: ["Supports"], operations: [read] }
      { allow: groups, groups: ["Guests"], operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  body: AWSJSON!
}

type Notification @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, read] }
  {
    allow: groups
    groups: ["Administrators"]
    operations: [create, update, read, delete]
  }
  { allow: groups, groups: ["Sales"], operations: [create, update, read] }
  { allow: groups, groups: ["Finances"], operations: [read] }
]) {
  id: ID!
  type: String!
  userId: String!
  title: String!
  body: String!
  status: String!
}
